# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#
# This Fastfile is available to all builds that import the BuildActions plugin.
# A default implementation for generating a Veracode build is provided and made available via the 'buildVeracode' lane (including default error handling) or via 'buildVeracodeCore' (without default error handling).

platform :ios do

   desc "Contains the core logic for generating and converting a build into a format suitable for upload to Veracode. Must provide a scheme (defaults to ENV['SCHEME']), config (defaults to 'Debug'), and build number (defaults to ENV['BUILD_NUMBER'])."
   lane :buildVeracodeCore do |options|
       scheme = options[:scheme] || ENV["SCHEME"] || UI.user_error!("Please provide a 'scheme' that can be passed to gym in order to generate your Veracode build.")
       config = options[:config] || "Debug"
       build_number = options[:build_number] || ENV["BUILD_NUMBER"] || UI.user_error!("Please provide a 'build_number' that can be passed to gym in order to generate your Veracode build.")
       output_name = "#{scheme}_Veracode_#{build_number}"

       # Use gym to generate a debug build with appropriate build settings for Veracode
       # See https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/PJWz14TuPBwScC2EpJtB2Q for more information
       xcarchive_path = gym(scheme: "#{scheme}",
                            configuration: "#{config}",
                            output_name: "#{output_name}",
                            clean: true,
                            output_directory: "./.build",
                            archive_path: "./.build/#{output_name}",
                            derived_data_path: "./dd",
                            skip_package_ipa: true,
                            xcargs: "DEBUG_INFORMATION_FORMAT='dwarf-with-dsym' ENABLE_BITCODE='YES'")

       UI.message "xcarchive created at: '#{xcarchive_path}'"

       # Convert the xcarchive into a .bca file suitable for upload to Veracode
       bca_payload_path = generate_veracode_bca(
           xcarchive_path: xcarchive_path,
           output_name: output_name
       )

       UI.success "Created Veracode bca file at '#{bca_payload_path}'"

       # TODO: Create a custom action that will handle the uploading of the .bca file to Veracode
   end

   desc "Wraps the 'buildVeracodeCore' lane in keychain setup/cleanup with proper error handling logic."
   lane :buildVeracode do |options|
       scheme = options[:scheme]
       config = options[:config]
       build_number = options[:build_number]

       setup
       begin
           buildVeracodeCore(scheme: scheme, config: config, build_number: build_number)
       rescue => exception
           cleanup
           raise exception
       else
           cleanup
       end
   end

   lane :synology do |options|
     synology(
       destination_url: options[:destination_url],
       project_name: options[:project_name],
       identifier: build_number
     )
   end
end
